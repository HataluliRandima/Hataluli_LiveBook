# Untitled notebook

## Expense

We will be using struct as our main focus.

```elixir
# create a module first
defmodule Expense do
  # define your strunct ypur fields
  # specify the type of your fields from the strunct
  defstruct(
    title: "",
    date: nil,
    amount: 0,
    store: ""
  )

  # specifying the type of my fields from the structs
  @type t :: %Expense{
          title: String.t(),
          date: Date.t() | nil,
          amount: number(),
          store: String.t()
        }
  # intialise your struct give them sove values
  def sample do
    [
      %Expense{title: "Heloo ", date: ~D[2022-09-12], amount: 18.99, store: "Metro"},
      %Expense{title: "Mobile", date: ~D[2022-10-18], amount: 55.65, store: "Bell"},
      %Expense{title: "Jacket", date: ~D[2022-07-06], amount: 150.99, store: "Marks"},
      %Expense{title: "Air Jordans", date: ~D[2022-10-30], amount: 799.99, store: "Nike"}
    ]
  end

  # go to terminal to create variable of your expenses
  # sample = Expense.sample

  # function for total amount we have spent it take list as param
  # it returns total amount
  # on the reduce we are intialise acc to zero
  @spec total([t]) :: number()
  def total(expenses) do
    expenses
    |> Enum.reduce(0, fn expense, acc -> expense.amount + acc end)
  end
end
```

```elixir
all_expense = Expense.sample()
```

```elixir
Expense.total(all_expense)
```
