# API notebook

## APIs

API stands for <b>Application Programming Interface</b>.

* It's a set of rules and protocols that allows different software applications to communicate with each other.

## Explanation using an example

Think of it as a menu in a restaurant. You, the customer, have a list of dishes you can order, prepared by the kitchen. The waiter (API) takes your request to the kitchen and brings back the dish you ordered. In this analogy:

* You are the user.
* The order represents the request.
* The kitchen is the system or application that processes the request.
* The dish that is served to you is the response.
* In a technical context, when you use an app on your phone to check the weather, the app sends a request to a server via an API. The server processes the request, retrieves the data, and sends it back to your app, which then displays the weather to you.

## Why are APIs important?

* <b>Interoperability:</b> APIs allow different software systems, which might have been developed independently and possibly in entirely different programming languages, to work together.
* <b>Modularity:</b> Systems can be built modularly, with different components interacting through well-defined APIs. This makes development, scaling, and troubleshooting easier.
* <b>Security:</b> Instead of giving direct access to databases or core systems, APIs allow controlled access, exposing only what's necessary.
* <b>Efficiency:</b> APIs can provide a standardized way to provide and receive data, which can lead to faster development and integration times.
* <b>Economic Value:</b> Companies often monetize their data and services through APIs. For instance, cloud providers offer a plethora of services accessed primarily through APIs.

## Different types of APIs:

* <b>REST (Representational State Transfer):</b> REST is an architectural style for distributed systems. RESTful APIs use HTTP requests to perform CRUD (Create, Read, Update, Delete) operations on resources, which are represented as URLs.

* <b>GraphQL:</b> Developed by Facebook, GraphQL is a query language for APIs. Instead of having multiple endpoints, GraphQL APIs typically have a single endpoint that can interpret and respond to complex queries, allowing clients to request only the data they need.

* <b>SOAP (Simple Object Access Protocol):</b> A protocol, primarily used for web services. It's known for its robustness and has built-in error handling. However, it's considered heavier than REST.

* <b>WebSockets:</b> Unlike the request-response model of REST and GraphQL, WebSockets allow a continuous two-way communication between the client and server. It's useful for applications that require real-time functionality.

* <b>gRPC:</b> Developed by Google, gRPC is a high-performance, open-source framework that uses HTTP/2 for transport and Protocol Buffers as the interface description language.
