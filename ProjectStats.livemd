# Untitled notebook

## Project Stats

Building a statistics library for elixir. Having some idea on mean and median dealings with numbers in statistics.

## Central Tendency

Calculating the Mean(Average). Working with louis who stays at toronto . He want to calculae number of cars in toronto (Population). He wants to count number of cars in toronto out of all the cars in Canada(Sample).
Avg height of people in his house (Population Mean)
Avg height of people in toronto out of all the people in Canada (Sample Mean)

Avg candies sold in 3 hrs (This population Mean)bcs scope is limited to 3 hrs
example Candies sold = 10, 20,30

Mean = (10+20+30)/3=20 candles/hr

Avg candies sold in first 3hr out of full day (Sample Mean)
candies sold = 10,10,30,25,30,23,18,10

Mean = (10+20+30)/3=20 candles/hr

```elixir
defmodule Stats.CentralTendency.Mean do
  alias Stats.Errors
  alias Stats.Validators

  # =============================x=======================================

  @spec population_mean([number()]) :: number() | {:error, String.t()}
  def population_mean([]), do: Errors.invalid_data_type()

  def population_mean(nums) when is_list(nums) do
    nums
    |> Validators.validate_num_list()
    |> calc_population_mean()
  end

  def population_mean(_), do: Errors.invalid_data_type()

  # ====================================================================

  @spec sample_mean([number()]) :: number() | {:error, String.t()}
  def sample_mean(nums), do: population_mean(nums)

  # ====================================================================

  defp calc_population_mean({false, _}), do: Errors.invalid_data_type()

  defp calc_population_mean({true, nums}) do
    nums
    |> Enum.sum()
    |> mean(Enum.count(nums))
  end

  # ====================================================================

  defp mean(sigma, count), do: sigma / count

  # ====================================================================
end
```
